%{
st* install_int(char*);
st* install_float(char*); //il ptr alla entry creata o NULL se non si puo' creare(esiste gia')
st* is_written(char*); //controlla se la variabile esiste ed e' stata gia scritta in caso ritorna il ptr alla st altrimenti NULL;
st* is_declared(char*);
char get_token(char*);
void set_as_written(char*);
char* var; //variabile in fase di scrittura 
st* st;
%}
//regular def.
id [a-zA-Z]+
num [0-9]+

%s int_dec, float_dec, rhs, writing_var
%%
int     {BEGIN int_dec; return INT_T;}
float   {BEGIN float_dec; return FLOAT_T;}
<int_dec>{id}       {auto st_ptr=install_int(yytext); if (st_ptr==NULL) return 1 else  {yylvalue=st_ptr; return ID_INT;}}
<float_dec>{id}     {auto st_ptr=install_float(yytext); if (st_ptr==NULL) return 1 else {yylvalue=st_ptr; return ID_FLOAT;}}
<rhs>{id}           {auto st_ptr=is_written(yytext); if (st_ptr==NULL) return 1 else {yylvalue=st_ptr; return get_token(yytext);}}
{id}                {auto st_ptr=is_declared(yytext); if (st_ptr) { var = yytext; BEGIN writing_var; yylvalue=st_ptr; return get_token(yytext);} else return 1;}
, {return yytext[0]}
<writing_var>; {BEGIN 0; set_as_written(yytext);}
; {BEGIN 0; return yytext[0]}
= {BEGIN rhs;} 
%%
... def delle funzioni ...
int main(){
    st = install_st();
    yyscan();
}